select(Strain, Contig, Protein, Gene.symbol, ID, Length, Mismatch, Gapopen, qstart, qend, sstart, send, evalue, bitscore)
ncbi_dt <- ncbi_dt[with(ncbi_dt, order(-ID)), ]
ncbi_dt <- ncbi_dt[!duplicated(ncbi_dt$Contig), ] %>%
group_by(Strain) %>%
arrange(Contig)
# Load datatable
datatable(ncbi_dt,
filter = 'top',
caption = 'Detecção de plasmídeos com o programa PlasmidFinder',
options = dt_opt_lst,
extensions = 'Buttons',
rownames = F)
# Read genes
genes <- read.csv(sep = "\t", "docs/KpV3_resistance_genes.tsv")
# Read results
ncbi_dt <- read.csv(sep = "\t", header = FALSE, file = "docs/blasts_resistance_genes_against_nosocomial_strains.txt", comment.char = "#")
colnames(ncbi_dt) <- c("Strain", "Contig", "Protein", "ID", "Length", "Mismatch", "Gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
# Merge
ncbi_dt <- merge.data.frame(x = ncbi_dt, y = genes, by.x = "Protein", by.y = "Protein.identifier")
# Sort results
ncbi_dt <- ncbi_dt %>%
select(Strain, Contig, Protein, Gene.symbol, ID, Length, Mismatch, Gapopen, qstart, qend, sstart, send, evalue, bitscore)
ncbi_dt <- ncbi_dt[with(ncbi_dt, order(-ID)), ]
ncbi_dt <- ncbi_dt[!duplicated(ncbi_dt$Contig), ] %>%
group_by(Strain) %>%
sort(Contig)
# Read genes
genes <- read.csv(sep = "\t", "docs/KpV3_resistance_genes.tsv")
# Read results
ncbi_dt <- read.csv(sep = "\t", header = FALSE, file = "docs/blasts_resistance_genes_against_nosocomial_strains.txt", comment.char = "#")
colnames(ncbi_dt) <- c("Strain", "Contig", "Protein", "ID", "Length", "Mismatch", "Gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
# Merge
ncbi_dt <- merge.data.frame(x = ncbi_dt, y = genes, by.x = "Protein", by.y = "Protein.identifier")
# Sort results
ncbi_dt <- ncbi_dt %>%
select(Strain, Contig, Protein, Gene.symbol, ID, Length, Mismatch, Gapopen, qstart, qend, sstart, send, evalue, bitscore)
ncbi_dt <- ncbi_dt[with(ncbi_dt, order(-ID)), ]
ncbi_dt <- ncbi_dt[!duplicated(ncbi_dt$Contig), ] %>%
group_by(Strain) %>%
arrange(Contig)
# Load datatable
datatable(ncbi_dt,
filter = 'top',
caption = 'Detecção de plasmídeos com o programa PlasmidFinder',
options = dt_opt_lst,
extensions = 'Buttons',
rownames = F)
# Read genes
genes <- read.csv(sep = "\t", "docs/KpV3_resistance_genes.tsv")
# Read results
ncbi_dt <- read.csv(sep = "\t", header = FALSE, file = "docs/blasts_resistance_genes_against_nosocomial_strains.txt", comment.char = "#")
colnames(ncbi_dt) <- c("Strain", "Contig", "Protein", "ID", "Length", "Mismatch", "Gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
# Merge
ncbi_dt <- merge.data.frame(x = ncbi_dt, y = genes, by.x = "Protein", by.y = "Protein.identifier")
# Sort results
ncbi_dt <- ncbi_dt %>%
select(Strain, Contig, Protein, Gene.symbol, ID, Length, Mismatch, Gapopen, qstart, qend, sstart, send, evalue, bitscore)
ncbi_dt <- ncbi_dt[with(ncbi_dt, order(-ID)), ]
ncbi_dt <- ncbi_dt[!duplicated(ncbi_dt$Contig), ] %>%
group_by(Strain)
# Load datatable
datatable(ncbi_dt,
filter = 'top',
caption = 'Detecção de plasmídeos com o programa PlasmidFinder',
options = dt_opt_lst,
extensions = 'Buttons',
rownames = F)
# Read genes
genes <- read.csv(sep = "\t", "docs/KpV3_resistance_genes.tsv")
# Read results
ncbi_dt <- read.csv(sep = "\t", header = FALSE, file = "docs/blasts_resistance_genes_against_nosocomial_strains.txt", comment.char = "#")
colnames(ncbi_dt) <- c("Strain", "Contig", "Protein", "ID", "Length", "Mismatch", "Gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
# Merge
ncbi_dt <- merge.data.frame(x = ncbi_dt, y = genes, by.x = "Protein", by.y = "Protein.identifier")
# Sort results
ncbi_dt <- ncbi_dt %>%
select(Strain, Contig, Protein, Gene.symbol, ID, Length, Mismatch, Gapopen, qstart, qend, sstart, send, evalue, bitscore)
ncbi_dt <- ncbi_dt[with(ncbi_dt, order(-ID)), ]
ncbi_dt <- ncbi_dt[!duplicated(ncbi_dt$Contig), ] %>%
arrange(Strain)
# Load datatable
datatable(ncbi_dt,
filter = 'top',
caption = 'Detecção de plasmídeos com o programa PlasmidFinder',
options = dt_opt_lst,
extensions = 'Buttons',
rownames = F)
# Read genes
genes <- read.csv(sep = "\t", "docs/KpV3_resistance_genes.tsv")
# Read results
ncbi_dt <- read.csv(sep = "\t", header = FALSE, file = "docs/blasts_resistance_genes_against_nosocomial_strains.txt", comment.char = "#")
colnames(ncbi_dt) <- c("Strain", "Contig", "Protein", "ID", "Length", "Mismatch", "Gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
# Merge
ncbi_dt <- merge.data.frame(x = ncbi_dt, y = genes, by.x = "Protein", by.y = "Protein.identifier")
# Sort results
ncbi_dt <- ncbi_dt %>%
select(Strain, Contig, Protein, Gene.symbol, ID, Length, Mismatch, Gapopen, qstart, qend, sstart, send, evalue, bitscore)
ncbi_dt <- ncbi_dt[with(ncbi_dt, order(-ID)), ]
ncbi_dt <- ncbi_dt[!duplicated(ncbi_dt$Contig), ] %>%
arrange(Strain, Protein)
# Load datatable
datatable(ncbi_dt,
filter = 'top',
caption = 'Detecção de plasmídeos com o programa PlasmidFinder',
options = dt_opt_lst,
extensions = 'Buttons',
rownames = F)
# Read genes
genes <- read.csv(sep = "\t", "docs/KpV3_resistance_genes.tsv")
# Read results
ncbi_dt <- read.csv(sep = "\t", header = FALSE, file = "docs/blasts_resistance_genes_against_nosocomial_strains.txt", comment.char = "#")
colnames(ncbi_dt) <- c("Strain", "Contig", "Protein", "ID", "Length", "Mismatch", "Gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
# Merge
ncbi_dt <- merge.data.frame(x = ncbi_dt, y = genes, by.x = "Protein", by.y = "Protein.identifier")
# Sort results
ncbi_dt <- ncbi_dt %>%
select(Strain, Contig, Protein, Gene.symbol, ID, Length, Mismatch, Gapopen, qstart, qend, sstart, send, evalue, bitscore)
ncbi_dt <- ncbi_dt[with(ncbi_dt, order(-ID)), ] %>%
arrange(Strain, Protein)
# Load datatable
datatable(ncbi_dt,
filter = 'top',
caption = 'Detecção de plasmídeos com o programa PlasmidFinder',
options = dt_opt_lst,
extensions = 'Buttons',
rownames = F)
# Read results
ncbi_dt <- read.csv(sep = "\t", header = FALSE, file = "docs/Plasmids/blast_aln.tsv", comment.char = "#")
colnames(ncbi_dt) <- c("Contig", "Reference", "ID", "Length", "Mismatch", "Gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
# Sort results
ncbi_dt <- ncbi_dt[with(ncbi_dt, order(-Length, -ID)), ]
#ncbi_dt <- ncbi_dt[!duplicated(ncbi_dt$Contig), ] %>%
#  arrange(Contig)
# Load datatable
datatable(ncbi_dt,
filter = 'top',
caption = 'Detecção de plasmídeos com o programa PlasmidFinder',
options = list(pageLength = 6,
dom='flrtBip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
fixedColumns = TRUE),
extensions = 'Buttons',
rownames = F)
# Read genes
genes <- read.csv(sep = "\t", "docs/KpV3_virulence_genes.tsv")
View(genes)
# Read genes
genes <- read.csv(sep = "\t", "docs/KpV3_resistance_genes.tsv")
View(genes)
# Read genes
genes <- read.csv(sep = "\t", "docs/KpV3_virulence_genes.tsv")
# Read results
ncbi_dt <- read.csv(sep = "\t", header = FALSE, file = "docs/blasts_virulence_genes_against_nosocomial_strains.txt", comment.char = "#")
colnames(ncbi_dt) <- c("Strain", "Contig", "Protein", "ID", "Length", "Mismatch", "Gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
# Merge
ncbi_dt <- merge.data.frame(x = ncbi_dt, y = genes, by.x = "Protein", by.y = "Protein.identifier")
# Sort results
ncbi_dt <- ncbi_dt %>%
select(Strain, Contig, Protein, Gene.symbol, ID, Length, Mismatch, Gapopen, qstart, qend, sstart, send, evalue, bitscore)
ncbi_dt <- ncbi_dt[with(ncbi_dt, order(-ID)), ] %>%
arrange(Strain, Protein)
# Load datatable
datatable(ncbi_dt,
filter = 'top',
caption = 'Alinhamento dos genes de virulência da cepa KpV3 contra os genomas de cepas hospitalares',
options = dt_opt_lst,
extensions = 'Buttons',
rownames = F)
# Read results
df <- read.csv(sep = "\t", header = FALSE, file = "docs/blasts_plasmids_genes_against_nosocomial_strains.txt", comment.char = "#")
colnames(df) <- c("Strain", "Contig", "Protein", "ID", "Length", "Mismatch", "Gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
# Merge
df <- merge.data.frame(x = df, y = genes, by.x = "Protein", by.y = "Protein.identifier")
# Sort results
df <- df %>%
select(Strain, Contig, Protein, Gene.symbol, ID, Length, Mismatch, Gapopen, qstart, qend, sstart, send, evalue, bitscore)
df <- df[with(df, order(-ID)), ] %>%
arrange(Strain, Protein)
# Load datatable
datatable(df,
filter = 'top',
caption = 'Alinhamento dos plasmídeos da cepa KpV3 contra os genomas de cepas hospitalares',
options = dt_opt_lst,
extensions = 'Buttons',
rownames = F)
# Read results
df <- read.csv(sep = "\t", header = FALSE, file = "docs/blasts_plasmids_genes_against_nosocomial_strains.txt", comment.char = "#")
View(df)
# Read results
df <- read.csv(sep = "\t", header = FALSE, file = "docs/blasts_plasmids_genes_against_nosocomial_strains.txt", comment.char = "#")
colnames(df) <- c("Strain", "Contig", "Plasmid", "ID", "Length", "Mismatch", "Gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
# Sort results
df <- df[with(df, order(-ID)), ] %>%
arrange(Strain, Plasmid)
# Read results
df <- read.csv(sep = "\t", header = FALSE, file = "docs/blasts_plasmids_genes_against_nosocomial_strains.txt", comment.char = "#")
colnames(df) <- c("Strain", "Contig", "Plasmid", "ID", "Length", "Mismatch", "Gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore")
# Sort results
df <- df[with(df, order(-ID)), ] %>%
arrange(Strain, Plasmid)
View(df)
# Read results
df <- read.csv(sep = "\t", header = FALSE, file = "docs/blasts_plasmids_genes_against_nosocomial_strains.txt", comment.char = "#")
colnames(df) <- c("Strain", "Contig", "Plasmid", "ID", "Length", "Mismatch", "Gapopen", "qstart", "qend", "qlen", "sstart", "send", "slen", "evalue", "bitscore", "qcovs")
# Sort results
df <- df[with(df, order(-ID)), ] %>%
arrange(Strain, Plasmid)
# Load datatable
datatable(df,
filter = 'top',
caption = 'Alinhamento dos plasmídeos da cepa KpV3 contra os genomas de cepas hospitalares',
options = dt_opt_lst,
extensions = 'Buttons',
rownames = F)
# Read results
df <- read.csv(sep = "\t", header = TRUE, file = "docs/Plasmids/all_refseeker_results.txt", comment.char = "#")
# Load datatable
datatable(df,
filter = 'top',
caption = 'Detecção de plasmídeos com o programa RefSeeker',
options = list(pageLength = 6,
dom='flrtBip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
fixedColumns = TRUE),
extensions = 'Buttons',
rownames = F)
# Read results
df <- read.csv(sep = "\t", header = TRUE, file = "docs/Plasmids/all_refseeker_results.txt", comment.char = "#")
# Load datatable
datatable(df,
filter = 'top',
caption = 'Detecção de plasmídeos com o programa RefSeeker',
options = list(pageLength = 6,
dom='flrtBip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
fixedColumns = TRUE),
extensions = 'Buttons',
rownames = F)
# Read results
df <- read.csv(sep = "\t", header = TRUE, file = "docs/Plasmids/all_refseeker_results.txt", comment.char = "#")
colnames(df) <- c("contig", "ID", "Mash Distance", "ANI", "Con. DNA", "Taxonomy ID", "Assembly Status",	"Organism")
# Load datatable
datatable(df,
filter = 'top',
caption = 'Detecção de plasmídeos com o programa RefSeeker',
options = list(pageLength = 6,
dom='flrtBip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
fixedColumns = TRUE),
extensions = 'Buttons',
rownames = F)
# Read results
df <- read.csv(sep = "\t", header = TRUE, file = "docs/Plasmids/all_refseeker_results.txt", comment.char = "#")
colnames(df) <- c("contig", "ID", "Mash Distance", "ANI", "Con. DNA", "Taxonomy ID", "Assembly Status Organism")
# Load datatable
datatable(df,
filter = 'top',
caption = 'Detecção de plasmídeos com o programa RefSeeker',
options = list(pageLength = 6,
dom='flrtBip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
fixedColumns = TRUE),
extensions = 'Buttons',
rownames = F)
# Read results
df <- read.csv(sep = "\t", header = TRUE, file = "docs/Plasmids/all_refseeker_results.txt", comment.char = "#")
colnames(df) <- c("contig", "ID", "Mash Distance", "ANI", "Con. DNA", "Assembly Status", "Organism")
# Load datatable
datatable(df,
filter = 'top',
caption = 'Detecção de plasmídeos com o programa RefSeeker',
options = list(pageLength = 6,
dom='flrtBip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
fixedColumns = TRUE),
extensions = 'Buttons',
rownames = F)
# Read results
df <- read.csv(sep = "\t", header = TRUE, file = "docs/Plasmids/all_refseeker_results.txt", comment.char = "#")
colnames(df) <- c("contig", "ID", "Mash Distance", "ANI", "Con. DNA", "Taxonomy ID", "Organism", "Assembly Status")
# Load datatable
datatable(df %>%
select(-6),
filter = 'top',
caption = 'Detecção de plasmídeos com o programa RefSeeker',
options = list(pageLength = 6,
dom='flrtBip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
fixedColumns = TRUE),
extensions = 'Buttons',
rownames = F)
package_version(ggtree)
package_version("ggtree")
packageVersion(ggtree)
packageVersion("ggtree")
packageVersion("ggplot2")
packageVersion("rentrez")
packageVersion("XML")
packageVersion("RColorBrewer")
packageVersion("phangorn")
packageVersion("ape")
packageVersion("dplyr")
packageVersion("rlist")
packageVersion("Polychrome")
setwd("/Volumes/falmeida1TB/Git_Repos/bacannot/docker/scripts/rscripts")
# Parse parameters
suppressMessages(library(docopt))
opt <- docopt(doc)
if (is.null(opt$gff)){
stop("At least one argument must be supplied (gff file)\n", call.=FALSE)
}
if (is.null(opt$input)){
stop("At least one argument must be supplied (AMRFinder output file)\n", call.=FALSE)
}
# Load libraries
suppressMessages(library(ballgown))
suppressMessages(library(DataCombine))
suppressMessages(library(dplyr))
suppressMessages(library(stringr))
suppressMessages(library(tidyr))
#!/usr/bin/Rscript
# Setting Help
'usage: addNCBIamr2Gff.R [--input=<file> --gff=<file> --out=<chr> --database=<chr> --type=<chr>]
options:
-g, --gff=<file>      GFF file to add Resfinder Annotations into
-i, --input=<file>    Resfinder output
-o, --out=<chr>       Output file name [default: out.gff]
-t, --type=<chr>      Type of feature. Ex: resistance
-d, --database=<chr>  Name of database' -> doc
# Function used to remove redundancy
reduce_row = function(i) {
d <- unlist(strsplit(i, split=","))
paste(unique(d), collapse = ',')
}
# Function to get Attribute Fields
getAttributeField <- function (x, field, attrsep = ";") {
s = strsplit(x, split = attrsep, fixed = TRUE)
sapply(s, function(atts) {
a = strsplit(atts, split = "=", fixed = TRUE)
m = match(field, sapply(a, "[", 1))
if (!is.na(m)) { rv = a[[m]][2]
}
else {
rv = as.character(NA)
}
return(rv)
})
}
# Operator to discard patterns found
'%ni%' <- Negate('%in%')
# Load NCBI AMRFinder output
#NCBIamr <- read.delim(opt$input)
resfinder_in <-
read.delim("/Volumes/falmeida1TB/bacannot_teste/output/KpV3/resistance/resfinder/results_tab.txt")
View(resfinder_in)
resfinder_in$start <-
str_split(resfinder_in$Position.in.contig, "..")[2]
resfinder_in$start <-
str_split(resfinder_in$Position.in.contig, "\.\.")[2]
resfinder_in$start <-
str_split(resfinder_in$Position.in.contig, "\\.\\.")[2]
resfinder_in$start <-
str_split(resfinder_in$Position.in.contig, "\\.\\.")[[2]]
getAttributeField(resfinder_in$Position.in.contig, "\\.\\.")
getAttributeField(as.character(resfinder_in$Position.in.contig), "\\.\\.")
resfinder_in$start <-
sapply(str_split(resfinder_in$Position.in.contig, "\\.\\."), "[", 1)
# Function to get resfinder positions
getResfinderPosition <- function (x, pos) {
return(
sapply(str_split(as.character(x), "\\.\\."), "[", pos)
)
}
resfinder_in$end <-
getResfinderPosition(resfinder_in$Position.in.contig, 2)
print(i)
# Detect protein ID
for (i in resfinder_in) {
print(i)
}
# Detect protein ID
for (i in resfinder_in) {
print(i$start)
}
# Detect protein ID
for (i in 1:nrow(df)) {
row = resfinder_in[i,]
print(row)
}
# Detect protein ID
for (i in 1:nrow(resfinder_in)) {
row = resfinder_in[i,]
print(row)
}
# Load GFF File
gff <- gffRead("/Volumes/falmeida1TB/bacannot_teste/output/KpV3/gffs/KpV3.gff")
gff$ID <- getAttributeField(as.character(gff$attributes), "ID", ";")
View(gff)
# Detect protein ID
for (i in 1:nrow(resfinder_in)) {
row = resfinder_in[i,]
the_gene <-
gff %>%
filter(start == i$start & end == i$end)
print(the_gene)
}
# Detect protein ID
for (i in 1:nrow(resfinder_in)) {
row = resfinder_in[i,]
the_gene <-
gff %>%
filter(start == row$start & end == row$end)
print(the_gene)
}
# Detect protein ID
for (i in 1:nrow(resfinder_in)) {
row = resfinder_in[i,]
the_gene <-
gff %>%
filter(as.character(start) == as.character(row$start) &
as.character(end) == as.character(row$end))
print(the_gene)
}
# Detect protein ID
for (i in 1:nrow(resfinder_in)) {
row = resfinder_in[i,]
the_gene <-
gff %>%
filter(as.character(start) == as.character(row$start) &
as.character(end) == as.character(row$end))
id = getAttributeField(as.character(the_gene$attributes), "ID", ";")
print(id)
}
# Detect protein ID
for (i in 1:nrow(resfinder_in)) {
row = resfinder_in[i,]
the_gene <-
gff %>%
filter(as.character(start) == as.character(row$start) &
as.character(end) == as.character(row$end) &
as.character(seqname) == as.character(row$Contig))
id = getAttributeField(as.character(the_gene$attributes), "ID", ";")
print(id)
}
# Detect protein ID
for (i in 1:nrow(resfinder_in)) {
row = resfinder_in[i,]
the_gene <-
gff %>%
filter(as.character(start) <= as.character(row$start) &
as.character(end) >= as.character(row$end) &
as.character(seqname) == as.character(row$Contig))
id = getAttributeField(as.character(the_gene$attributes), "ID", ";")
print(id)
}
# Detect protein ID
for (i in 1:nrow(resfinder_in)) {
row = resfinder_in[i,]
the_gene <-
gff %>%
filter(as.character(start) <= as.character(row$start) &&
as.character(end) >= as.character(row$end) &&
as.character(seqname) == as.character(row$Contig))
id = getAttributeField(as.character(the_gene$attributes), "ID", ";")
print(id)
}
the_gene <-
gff %>%
filter(between(as.integer(row.start), as.integer(start), as.integer(end)) &
as.character(end) >= as.character(row$end) &
as.character(seqname) == as.character(row$Contig))
# Detect protein ID
for (i in 1:nrow(resfinder_in)) {
row = resfinder_in[i,]
the_gene <-
gff %>%
filter(between(as.integer(row.start), as.integer(start), as.integer(end)) &
as.character(end) >= as.character(row$end) &
as.character(seqname) == as.character(row$Contig))
id = getAttributeField(as.character(the_gene$attributes), "ID", ";")
print(id)
}
# Detect protein ID
for (i in 1:nrow(resfinder_in)) {
row = resfinder_in[i,]
the_gene <-
gff %>%
filter(between(as.integer(row$start), as.integer(start), as.integer(end)) &
as.character(end) >= as.character(row$end) &
as.character(seqname) == as.character(row$Contig))
id = getAttributeField(as.character(the_gene$attributes), "ID", ";")
print(id)
}
between(3, 1, 7)
# Detect protein ID
for (i in 1:nrow(resfinder_in)) {
row = resfinder_in[i,]
the_gene <-
gff %>%
filter(as.integer(start) <= as.integer(row$start) &
as.integer(end) >= as.integer(row$end) &
as.character(seqname) == as.character(row$Contig))
id = getAttributeField(as.character(the_gene$attributes), "ID", ";")
print(id)
}
