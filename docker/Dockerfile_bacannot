FROM ubuntu:20.04

MAINTAINER Felipe Marques de Almeida <180039822@aluno.unb.br>
SHELL ["/bin/bash", "-c"]
# DEPENDENCIES
WORKDIR /work

# INSTALL MINICONDA
RUN apt-get update && \
			apt-get upgrade -y && \
			apt-get install -y git libc6-dev build-essential hmmer perl bedtools libidn11 wget python python3 python3-pip && \
			wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /miniconda.sh && \
			bash /miniconda.sh -b -p /miniconda
ENV PATH="$PATH:/miniconda/bin"

# Update do latest
RUN conda update -y -n base conda

# Configure Miniconda
RUN conda config --add channels defaults && \
			conda config --add channels bioconda && \
			conda config --add channels conda-forge && \
			conda init --all

## Install bedtools, ncbi-blast+ and custom scripts
RUN rm -rf /var/lib/apt/lists/* && \
			wget ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ncbi-blast-2.10.1+-x64-linux.tar.gz && \
			tar -zxvf ncbi-blast-2.10.1+-x64-linux.tar.gz && \
			cd ncbi-blast-2.10.1+/bin/ && \
			ln -rs $(ls) /usr/local/bin/ && \
			mkdir /work/scripts && \
			cd /work/scripts && \
			git clone https://github.com/fmalmeida/genomeGTFtools.git && \
			cd genomeGTFtools/ && \
			ln -rs $(ls) /usr/local/bin/

# INSTALL AMRFinderPlus
RUN conda create -y -n AMRFINDERPLUS && \
			conda install -y -n AMRFINDERPLUS -c bioconda ncbi-amrfinderplus && \
			source activate AMRFINDERPLUS && \
			amrfinder -u && \
			conda deactivate

# INSTALL ABRICATE
RUN conda create -y -n ABRICATE -c bioconda -c defaults abricate

## Install Diamond
RUN wget https://github.com/bbuchfink/diamond/releases/download/v0.9.25/diamond-linux64.tar.gz && \
			tar zxvf diamond-linux64.tar.gz && \
			mv diamond /usr/local/bin

# IMPORTANT ADDITIONAL DATABASES

## VFDB
RUN mkdir /work/vfdb && \
			cd /work/vfdb && \
			wget http://www.mgc.ac.cn/VFs/Down/VFDB_setA_pro.fas.gz && \
			gzip -d VFDB_setA_pro.fas.gz && \
			diamond makedb --in /work/vfdb/VFDB_setA_pro.fas -d /work/vfdb/vfdb_prot

## VFDB for ABRICATE
RUN cd /work/vfdb && \
			mkdir -p /miniconda/envs/ABRICATE/db/vfdb && \
 			wget http://www.mgc.ac.cn/VFs/Down/VFDB_setA_nt.fas.gz && \
			gzip -d VFDB_setA_nt.fas.gz && \
			awk -v db=VFDB '/>/{ split($0,name," "); all=$0; $0=">" db "~~~" name[1] "~~~" name[2] " " all }1' VFDB_setA_nt.fas | sed -e 's/~>/ /g' -e 's/ ~/~/g' -e 's/]~/~/g' > /miniconda/envs/ABRICATE/db/vfdb/sequences

## ARGMiner for ABRICATE
RUN mkdir /work/ARGMiner && \
			cd /work/ARGMiner && \
			mkdir -p /miniconda/envs/ABRICATE/db/ARGMiner && \
			wget http://bench.cs.vt.edu/ftp/argminer/release/ARGminer-v1.1.1.A.fasta && \
			awk -v db=ARGMiner '/>/{ split($0,a,"|"); $0=">" db "~~~" a[1] "~~~" a[3] "~~~" a[2] " " a[4] }1' ARGminer-v1.1.1.A.fasta | sed 's/~>/~/g' > /miniconda/envs/ABRICATE/db/ARGMiner/sequences

## ICEberg (also for ABRICATE)
RUN mkdir /work/iceberg && \
			cd /work/iceberg && \
			wget https://bioinfo-mml.sjtu.edu.cn/ICEberg2/download/ICEberg_seq_experimental_data.fas && \
			mkdir -p /miniconda/envs/ABRICATE/db/ICEberg && \
			awk -v db=ICEberg '/>/{ split($0,a,"|"); all=$0; $0=">" db "~~~" "ICE_" a[2] "~~~" a[5] " " all }1' ICEberg_seq_experimental_data.fas | sed -e 's/ >/ /g' > /miniconda/envs/ABRICATE/db/ICEberg/sequences && \
			makeblastdb -dbtype nucl -in ICEberg_seq_experimental_data.fas -out /work/iceberg/iceberg_nt && \
      wget https://bioinfo-mml.sjtu.edu.cn/ICEberg2/download/ICEberg_aa_experimental_data.fas && \
			diamond makedb --in ICEberg_aa_experimental_data.fas -d /work/iceberg/iceberg_prot

##  VICTORS (for ABRICATE)
RUN mkdir /work/victors && \
			cd /work/victors && \
			wget -O victors_original.fasta "http://www.phidias.us/victors/downloads/gen_downloads_protein.php" && \
			grep -v "^[^>M]" victors_original.fasta > victors_prot.fasta && \
			diamond makedb --in victors_prot.fasta -d /work/victors/victors_prot && \
			mkdir -p /miniconda/envs/ABRICATE/db/victors && \
			awk -v db=victors '/>/{ split($0,a,"|"); all=$0; $0=">" db "~~~" "Victors_" a[2] "~~~" a[4] " " all }1' victors_prot.fasta | sed -e 's/ >/ /g' > /miniconda/envs/ABRICATE/db/victors/sequences

## PHAST (and for ABRICATE)
RUN mkdir /work/phast && \
			cd /work/phast && \
			mkdir -p /miniconda/envs/ABRICATE/db/phast && \
			wget -O phast_prot.fasta http://phast.wishartlab.com/phage_finder/DB/prophage_virus.db && \
			diamond makedb --in phast_prot.fasta -d /work/phast/phast_prot && \
			awk -v db=phast '/>/{ split($0,a,"|"); all=$0; $0=">" db "~~~" "PHAST_" a[2] "~~~" a[4] " " all }1' phast_prot.fasta | sed -e 's/ >/ /g' > /miniconda/envs/ABRICATE/db/phast/sequences

# Reload and setup abricate databases
RUN source activate ABRICATE && \
			abricate --setupdb

# INSTALL BARRNAP
RUN conda install -y -c bioconda -c conda-forge barrnap

# INSTALL EMBOSS
RUN apt-get update && \
			DEBIAN_FRONTEND="noninteractive" apt-get install -y libdatetime-perl libxml-simple-perl libdigest-md5-perl default-jre emboss

# INSTALL MLST
RUN conda create -y -n MLST && \
			conda install -y -n MLST -c conda-forge -c bioconda -c defaults mlst

# INSTALL NANOPOLISH
## Configure Conda
RUN conda create -y -n NANOPOLISH python=3.7 && \
			source activate NANOPOLISH && \
			conda config --add channels r && \
			conda config --add channels bioconda && \
			conda install -y pysam && \
			conda install -y -c anaconda hdf5 && \
			conda install -c bioconda htslib && \
			conda install -c anaconda biopython && \
			conda install -c conda-forge eigen && \
			apt-get install -y libhdf5-dev && \
			conda config --add channels defaults && \
			conda config --add channels conda-forge && \
			conda config --add channels bioconda && \
			conda install -y nanopolish && \
			git clone --recursive https://github.com/jts/nanopolish.git && \
			mv nanopolish/scripts /work/nanopolish_scripts && \
			rm -r nanopolish && \
			conda install -y -c bioconda minimap2 && \
			conda install -y -c bioconda samtools  && \
			conda install -y -c bioconda seqtk && \
			conda install -y -c conda-forge parallel

# INSTALL PROKKA
#apt-get update && apt-get upgrade -y && \
#apt-get install -y libdatetime-perl libxml-simple-perl libdigest-md5-perl bioperl infernal prodigal aragorn hmmer && \
RUN wget ftp://ftp.jcvi.org/pub/data/TIGRFAMs/TIGRFAMs_15.0_HMM.LIB.gz && \
			conda create -y -n PROKKA && \
			source activate PROKKA && \
			conda install -y -c conda-forge -c bioconda -c defaults prokka>=1.14 && \
			gzip -d TIGRFAMs_15.0_HMM.LIB.gz && \
			mv TIGRFAMs_15.0_HMM.LIB TIGRFAMs_15.hmm && \
			mv TIGRFAMs_15.hmm /miniconda/envs/PROKKA/db/hmm/ && \
			prokka --setupdb && \
			apt-get install -y ncbi-tools-bin

# INSTALL PHIGARO
RUN apt-get install -y tar git libc6-dev gcc g++ locate seqtk && \
			conda install -y -c bioconda prodigal hmmer && \
			python3 -m pip install phigaro && \
			(echo -e "\n" ; echo -e "\n" ; echo "N" ; echo "N") | phigaro-setup --pvog /work/phigaro_pvog -c /work/phigaro_config.yml --no-updatedb && \
			chmod a+rw -R /work/phigaro_pvog

# Help Phigaro Installation
RUN cd /usr/bin && \
			for i in * ; do ln -rs "$i" /usr/local/bin ; done

# INSTALL RGI
RUN python3 -m pip install six biopython filetype pytest mock pandas matplotlib seaborn pyfaidx pyahocorasick && \
			python3 -m pip install git+https://github.com/arpcard/rgi.git && \
			wget https://card.mcmaster.ca/latest/data && \
		  tar -xvf data ./card.json && \
			rgi load --card_json ./card.json

# Install IslandPath
RUN conda create -y -n find_GIs && \
			conda install -y -n find_GIs -c bioconda islandpath && \
			conda install -y -n find_GIs -c conda-forge biopython && \
			git clone https://github.com/brinkmanlab/islandpath.git ./islandpath && \
			ln -rs ./islandpath/Dimob.pl /usr/local/bin

# Download pythonScripts
RUN git clone https://github.com/fmalmeida/pythonScripts.git && \
			ln -rs pythonScripts/*.py /usr/local/bin/

# Update blast2gff.py
RUN cd /work/scripts && \
			rm -r genomeGTFtools && \
			git clone https://github.com/fmalmeida/genomeGTFtools.git && \
      cd genomeGTFtools/ && \
			rm /usr/local/bin/blast2gff.py && \
			ln -rs blast2gff.py /usr/local/bin/

# Install Roary dependencies
RUN conda config --add channels r && \
			conda config --add channels defaults && \
			conda config --add channels conda-forge && \
			conda config --add channels bioconda && \
			conda create -y -n ROARY && \
			conda install -y -n ROARY roary && \
			wget https://github.com/sanger-pathogens/Roary/raw/master/contrib/roary2svg/roary2svg.pl -O /usr/local/bin/roary2svg.pl && \
			chmod a+x /usr/local/bin/roary2svg.pl && \
			wget https://github.com/sanger-pathogens/Roary/raw/master/contrib/roary_plots/roary_plots.py -O /usr/local/bin/roary_plots.py && \
			chmod a+x /usr/local/bin/roary_plots.py
RUN conda create -y -n ROARY_PLOTS python=3.7 && \
			conda install -y -n ROARY_PLOTS -c conda-forge matplotlib biopython seaborn pandas

# Install tbl2asn
#RUN wget ftp://ftp.ncbi.nih.gov/toolbox/ncbi_tools/converters/by_program/tbl2asn/linux.tbl2asn.gz && \
#			gzip -d linux.tbl2asn.gz && mv linux.tbl2asn tbl2asn && chmod +x ./tbl2asn && \
#			rm /miniconda/bin/tbl2asn && mv ./tbl2asn /miniconda/bin
RUN conda install -y -c bioconda tbl2asn-forever

# Install MongoDB
RUN conda create -y -n mongoDB -c anaconda mongodb pymongo

# CHECK ENVs
RUN conda info -e

# Set WorkDir
WORKDIR /work
